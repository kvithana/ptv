type Query {
  stop(id: ID!, routeType: RouteType!): Stop!
  route(id: ID!): Route!
  departures(stopId: ID!, routeType: RouteType!): DepartureResponse!
  run(id: ID!): Run!
}

type DepartureResponse {
  departures: [Departure!]!
  disruptions: [Disruption!]!
  routes: [Route!]!
}

type Departure {
  id: ID!
  "Scheduled (i.e. timetabled) departure time and date in ISO 8601 UTC format"
  scheduled_departure_utc: ISODateString
  "Real-time estimate of departure time and date in ISO 8601 UTC format"
  estimated_departure_utc: ISODateString
  "Real-time estimate of departure time and date in ISO 8601 UTC format"
  at_platform: Boolean
  "Platform number at stop (metropolitan train only; returns null for other modes)"
  platform_number: String
  "Flag indicating special condition for run (e.g. RR Reservations Required, GC Guaranteed Connection, DOO Drop Off Only, PUO Pick Up Only, MO Mondays only, TU Tuesdays only, WE Wednesdays only, TH Thursdays only, FR Fridays only, SS School days only; ignore E flag)"
  flags: [String!]
  "Chronological sequence for the departures in a run. Order ascendingly by this field to get chronological order (earliest first) of departures with the same run_ref. NOTE, this field is not always N+1 or N-1 of the previous or following departure. e.g 100, 200, 250, 300 instead of 1, 2, 3, 4"
  departure_sequence: Int
  "The related disruptions for the departure."
  disruptions: [Disruption!]!
  "The related route for the departure."
  run: Run
}

type Disruption {
  "Disruption information identifier"
  id: ID!
  "Headline title summarising disruption information"
  title: String
  "URL of relevant article on PTV website"
  url: String
  "Description of the disruption"
  description: String
  "Status of the disruption (e.g. 'Planned', 'Current')"
  status: String
  "Type of disruption"
  disruption_type: String
  "Date and time disruption information is published on PTV website, in ISO 8601 UTC format"
  published_on: ISODateString
  "Date and time disruption information was last updated by PTV, in ISO 8601 UTC format"
  last_updated: ISODateString
  "Date and time at which disruption begins, in ISO 8601 UTC format"
  from_date: ISODateString
  "Date and time at which disruption ends, in ISO 8601 UTC format (returns null if unknown)"
  to_date: ISODateString
  "Route relevant to a disruption (if applicable)"
  routes: [Route!]
  "Stop relevant to a disruption (if applicable)"
  stops: [Stop!]
}

"Direction of a route."
type Direction {
  "Direction of travel identifier"
  id: ID!
  "The name of the direction."
  direction_name: String
  "The related route for the direction."
  route: Route
}

"Direction of a stop on a route."
type RouteStopDirection {
  "The related stop for the direction."
  stop: Stop
  "The related direction for the stop."
  direction: Direction
  "The related departures for the stop."
  departures(limit: Int): [Departure!]
}

"A stop on the network. Can be connected to many routes."
type Stop {
  "The int32 ID of the stop converted to a string."
  id: ID!
  "The name of the stop."
  stop_name: String
  "The latitude of the stop."
  stop_latitude: Float
  "The longitude of the stop."
  stop_longitude: Float
  "Landmark or street the stop is located at."
  stop_landmark: String
  "The suburb the stop is located in."
  stop_suburb: String
  "Sequence of the stop on the route/run; return 0 when route_id or run_id not specified. Order ascendingly by this field (when non zero) to get physical order (earliest first) of stops on the route_id/run_id."
  stop_sequence: Int
  "The related routes for the stop."
  routes: [RouteStop!]
}

"A stop on a route."
type RouteStop {
  stop: Stop!
  route: Route!
  directions: [RouteStopDirection!]
}

type Run {
  "The int32 ID of the run converted to a string. Or the Alphanumeric trip/service run identifier"
  id: ID!
  "The related route for the run."
  route: Route
  route_type: RouteType
  "Final stop of the run."
  final_stop: Stop
  "Name of the destination of run"
  destination_name: String
  "Status of metropolitan train run; returns 'scheduled' for other modes"
  status: String
  "Chronological sequence of the trip/service run on the route in direction. Order ascendingly by this field to get chronological order (earliest first) of runs with the same route_id and direction_id."
  run_sequence: Int
  "The number of remaining skipped/express stations for the run/service from a stop."
  express_stop_count: Int
  "Position of the trip/service run. Available for some Bus, Nightrider and Train runs. May be null."
  vehicle_position: VehiclePosition
  "Descriptor of the trip/service run. Only available for some runs. May be null. "
  vehicle_descriptor: VehicleDescriptor
  "JSON string array of the geopath of the route"
  geopath: String
}

type VehiclePosition {
  "Geographic coordinate of latitude of the vehicle when known. May be null. Only available for some bus runs."
  latitude: Float
  "Geographic coordinate of longitude of the vehicle when known. May be null. Only available for some bus runs."
  longitude: Float
  "CIS - Metro Train Vehicle Location Easting coordinate"
  easting: Float
  "CIS - Metro Train Vehicle Location Northing coordinate"
  northing: Float
  "CIS - Metro Train Vehicle Location Direction"
  direction: String
  "Compass bearing of the vehicle when known, clockwise from True North, i.e., 0 is North and 90 is East. May be null. Only available for some bus runs."
  bearing: Float
  "Supplier of vehicle position data."
  supplier: String
  "Date and time that the vehicle position data was supplied."
  datetime_utc: String
  "CIS - Metro Train Vehicle Location data expiry time"
  expiry_time: String
}

type VehicleDescriptor {
  "Operator name of the vehicle such as 'Metro Trains Melbourne', 'Yarra Trams', 'Ventura Bus Line', 'CDC' or 'Sita Bus Lines'. May be null/empty. Only available for train, tram, v/line and some bus runs."
  operator: String
  "Operator identifier of the vehicle such as '26094'. May be null/empty. Only available for some tram and bus runs."
  id: String
  "Indicator if vehicle has a low floor. May be null. Only available for some tram runs."
  low_floor: Boolean
  "Indicator if vehicle is air conditioned. May be null. Only available for some tram runs."
  air_conditioned: Boolean
  "Vehicle description such as '6 Car Comeng', '6 Car Xtrapolis', '3 Car Comeng', '6 Car Siemens', '3 Car Siemens'. May be null/empty. Only available for some metropolitan train runs."
  description: String
  "Supplier of vehicle descriptor data."
  supplier: String
  "The length of the vehicle. Applies to CIS - Metro Trains"
  length: String
}

type Route {
  id: ID!
  "The type of route."
  route_type: RouteType
  "The name of the route."
  route_name: String
  "Route number presented to public (nb. not route_id)"
  route_number: String
  "JSON string array of the geopath of the route"
  geopath: String
  "The related stops for the route."
  stops: [RouteStop!]
  "The related directions for the route."
  directions: [RouteDirection!]
  "Service status for the route (indicates disruptions)"
  route_service_status: RouteServiceStatus
}

type RouteServiceStatus {
  description: String
  timestamp: ISODateString
}

type RouteDirection {
  "The related direction for the route."
  direction: Direction
  "The related route for the direction."
  route: Route
  "The related stops for the direction."
  stops: [RouteStop!]
}

scalar ISODateString

enum RouteType {
  train
  bus
  tram
  vline
  night_bus
}
